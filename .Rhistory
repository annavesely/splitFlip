obs[[q]] <- setdiff(seq(n), D1)
vars[[q]] <- do.call(varSel, args=c(list(X=X[D1,], Y=Y[D1], target=target), varSelArgs))
vars
vars[[q]] <- targetOracle(X,Y,target,active)
vars
targetOracle(X,Y,4,c(1,2))
target
active
targetOracle(X,Y,4,c(1,2))
targetOracle(X,Y,4,c(1,2))
vars[[q]] <- targetOracle(X,Y,target,active)
vars
vars[[q]] <- do.call(varSel, args=c(list(X=X[D1,], Y=Y[D1], target=target), varSelArgs))
vars
vars[[q]] <- sort(do.call(varSel, args=c(list(X=X[D1,], Y=Y[D1], target=target), varSelArgs)))
vars
?lm
md <- lm(Y[D1] ~ X[D1, vars[[q]]])
md
md$coefficients
sgn(md$coefficients)
sign(md$coefficients)
sign(md$coefficients[-1])
coeff <- lm(Y[D1] ~ X[D1,vars])$coefficients # fit LM using D1 and selected vars
vars <- sort(do.call(varSel, args=c(list(X=X[D1,], Y=Y[D1], target=target), varSelArgs)))
vars[[q]] <- vars
vars[[]]
vars[[q]]
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
varSel <- targetOracle
varSelArgs <- list("toSel"=active)
m <- ncol(X)
n <- nrow(X)
n0 <- floor(n/2)
obs <- vector(mode="list", length=Q)
vars <- vector(mode="list", length=Q)
Q <- 3
obs <- vector(mode="list", length=Q)
vars <- vector(mode="list", length=Q)
cSigns <- rep(0,m) # mode of the estimated coefficients
q <- 1
# randomly split the data in 2 subsets
D1 <- sample(seq(n), n0)
obs[[q]] <- setdiff(seq(n), D1)
V <- sort(do.call(varSel, args=c(list(X=X[D1,], Y=Y[D1], target=target), varSelArgs)))
D1
V
# randomly split the data in 2 subsets
D1 <- sample(seq(n), n0) # first subset
V <- sort(do.call(varSel, args=c(list(X=X[D1,], Y=Y[D1], target=target), varSelArgs))) # selected variables
coeff <- lm(Y[D1] ~ X[D1,V])$coefficients[-1] # coefficients of selected vars
coeff
obs[[q]] <- setdiff(seq(n), D1)
vars[[q]] <- V
coeff >= 0
cSigns[V] + sign(coeff >= 0)
cSigns[V] <- cSigns[V] + sign(coeff >= 0)
obs <- vector(mode="list", length=Q)
vars <- vector(mode="list", length=Q)
cSigns <- rep(0,m) # mode of the estimated coefficients
for(q in seq(Q)){
# randomly split the data in 2 subsets
D1 <- sample(seq(n), n0) # first subset
V <- sort(do.call(varSel, args=c(list(X=X[D1,], Y=Y[D1], target=target), varSelArgs))) # selected variables
coeff <- lm(Y[D1] ~ X[D1,V])$coefficients[-1] # coefficients of selected vars
obs[[q]] <- setdiff(seq(n), D1)
vars[[q]] <- V
cSigns[V] <- cSigns[V] + sign(coeff >= 0)
}
obs <- vector(mode="list", length=Q)
vars <- vector(mode="list", length=Q)
cSigns <- rep(0,m) # mode of the estimated coefficients
for(q in seq(Q)){
# randomly split the data in 2 subsets
D1 <- sample(seq(n), n0) # first subset
V <- sort(do.call(varSel, args=c(list(X=X[D1,], Y=Y[D1], target=target), varSelArgs))) # selected variables
coeff <- lm(Y[D1] ~ X[D1,V])$coefficients[-1] # coefficients of selected vars
obs[[q]] <- setdiff(seq(n), D1)
vars[[q]] <- V
cSigns[V] <- cSigns[V] + sign(coeff)
}
cSigns
obs
vars
cSigns
signs
obs <- vector(mode="list", length=Q)
vars <- vector(mode="list", length=Q)
signs <- rep(0,m) # mode of the estimated coefficients
for(q in seq(Q)){
# randomly split the data in 2 subsets
D1 <- sample(seq(n), n0) # first subset
V <- sort(do.call(varSel, args=c(list(X=X[D1,], Y=Y[D1], target=target), varSelArgs))) # selected variables
coeff <- lm(Y[D1] ~ X[D1,V])$coefficients[-1] # coefficients of selected vars
obs[[q]] <- setdiff(seq(n), D1)
vars[[q]] <- V
signs[V] <- signs[V] + sign(coeff)
}
signs
vars
coeff
obs <- vector(mode="list", length=Q)
vars <- vector(mode="list", length=Q)
signs <- rep(0,m) # mode of the estimated coefficients
for(q in seq(Q)){
# randomly split the data in 2 subsets
D1 <- sample(seq(n), n0) # first subset
V <- sort(do.call(varSel, args=c(list(X=X[D1,], Y=Y[D1], target=target), varSelArgs))) # selected variables
coeff <- lm(Y[D1] ~ X[D1,V])$coefficients[-1] # coefficients of selected vars
obs[[q]] <- setdiff(seq(n), D1)
vars[[q]] <- V
signs[V] <- signs[V] + sign(coeff)
}
signs
signs <- (sign >= 0) + 0
signs <- (signs >= 0) + 0
signs
obs <- vector(mode="list", length=Q)
vars <- vector(mode="list", length=Q)
signs <- rep(0,m) # mode of the estimated coefficients
for(q in seq(Q)){
# randomly split the data in 2 subsets
D1 <- sample(seq(n), n0) # first subset
V <- sort(do.call(varSel, args=c(list(X=X[D1,], Y=Y[D1], target=target), varSelArgs))) # selected variables
coeff <- lm(Y[D1] ~ X[D1,V])$coefficients[-1] # coefficients of selected vars
obs[[q]] <- setdiff(seq(n), D1)
vars[[q]] <- V
signs[V] <- signs[V] + sign(coeff)
}
signs
obs <- vector(mode="list", length=Q)
vars <- vector(mode="list", length=Q)
signs <- rep(0,m) # mode of the estimated coefficients
for(q in seq(Q)){
# randomly split the data in 2 subsets
D1 <- sample(seq(n), n0) # first subset
V <- sort(do.call(varSel, args=c(list(X=X[D1,], Y=Y[D1], target=target), varSelArgs))) # selected variables
coeff <- lm(Y[D1] ~ X[D1,V])$coefficients[-1] # coefficients of selected vars
obs[[q]] <- setdiff(seq(n), D1)
vars[[q]] <- V
signs[V] <- signs[V] + sign(coeff)
}
signs
signs >= 0 + 0
(signs >= 0) + 0
prova <- 2*(signs >= 0) - 1
(signs >= 0) + 0 - prova
prova
(signs >= 0) + 0
for(i in seq_along(prova)){if(prova[i]==-1){prova[i] <- 0}}
prova
(signs >= 0) - prova
devtools::document()
library(splitFlip)
?splitFlip
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
target <- 2*length(active)
G1 <- splitFlip(X, Y, target=target, seed=42)
head(round(G1,2))
maxT(G1, alpha=0.1)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with Lasso selection
G1 <- splitFlip(X, Y, target=target, seed=42)
# maxT algorithm
maxT(G1, alpha=0.1)
devtools::document()
devtools::document()
?splitFlip_old
library(splitFlip)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
G1 <- splitFlip_old(X, Y, target=target, seed=42)
maxT(G1, alpha=0.1)
active
G2 <- splitFlip_old(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
devtools::document()
library(splitFlip)
?splitFlips_old
?splitFlip_old
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with Lasso selection
G1 <- splitFlip_old(X, Y, target=target, seed=42)
maxT(G1, alpha=0.1)
G2 <- splitFlip_old(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
maxT(G2, alpha=0.1)
?splitFlip
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with Lasso selection
G1 <- splitFlip(X, Y, target=target, seed=42)
maxT(G1, alpha=0.1)
G2 <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G2, alpha=0.1)
?factor
sign(0)
sign(1)
sign(-1)
sign(-2)
sign(0.1)
setwd("~/GitHub/splitFlip_beta/Simulations_sign/Sim1")
setwd("~/GitHub/splitFlip_beta/Simulations/Sim1")
setwd("~/GitHub/splitFlip_beta/Simulations_sign/Sim1")
devtools::document
devtools::document()
devtools::document()
library(splitFlip)
?splitFlip
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
target <- 2*length(active)
G1 <- splitFlip_old(X, Y, target=target, seed=42)
devtools::document()
library(splitFlip)
?splitFlip
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with Lasso selection
G1 <- splitFlip(X, Y, target=target, seed=42)
# maxT algorithm
maxT(G1, alpha=0.1)
G2 <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G2, alpha=0.1)
?splitFlip
?splitFlip::simData
require(splitFlip)
?splitFlip
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
system.time(G <- splitFlip(X, Y, Q = 50, exact = TRUE, target = target, varSel = targetLasso, seed = 42))
target <- 2*length(active)
system.time(G <- splitFlip(X, Y, Q = 50, exact = TRUE, target = target, varSel = targetLasso, seed = 42))
system.time(G <- splitFlip(X, Y, Q = 50, exact = FALSE, target = target, varSel = targetLasso, seed = 42))
min(G)
maxT(G, alpha = 0.05)
?splitFlip
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
res <- splitFlip::simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
res
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
target <- 2*length(active)
o <- splitFlip:::getSplits(X, Y, 1, target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
o
o <- splitFlip:::getSplits(X, Y, 1, target, varSel=splitFlip::targetOracle, varSelArgs=list(toSel=active), seed=42)
o
m <- ncol(X)
n <- nrow(X)
n0 <- floor(n/2)
obs <- vector(mode="list", length=Q)
vars <- vector(mode="list", length=Q)
signs <- matrix(0, ncol=m, nrow=Q)
Q <- 1
m <- ncol(X)
n <- nrow(X)
n0 <- floor(n/2)
obs <- vector(mode="list", length=Q)
vars <- vector(mode="list", length=Q)
signs <- matrix(0, ncol=m, nrow=Q)
q <- q
q <- 1
D1 <- sample(seq(n), n0) # first subset
D1
V <- sort(do.call(varSel, args=c(list(X=X[D1,], Y=Y[D1], target=target), varSelArgs))) # selected variables
V <- sort(do.call(splitFlip::targetOracle, args=c(list(X=X[D1,], Y=Y[D1], target=target), varSelArgs=list(toSel=active)))) # selected variables
V <- sort(do.call(splitFlip::targetOracle, args=c(list(X=X[D1,], Y=Y[D1], target=target, toSel=active)))) # selected variables
V
coeff <- lm(Y[D1] ~ X[D1,V])$coefficients[-1]
coeff
sign(coeff)
signs
obs[[q]] <- setdiff(seq(n), D1)
vars[[q]] <- V
signs[q,V] <- sign(coeff)
signs
library(splitFlip)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
o <- getSplits(X, Y, Q=1, target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
o <- splitFlip::getSplits(X, Y, Q=1, target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
o <- splitFlip:::getSplits(X, Y, Q=1, target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
o
o <- splitFlip:::getSplits(X, Y, Q=2, target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
o
o <- splitFlip:::getSplits(X, Y, Q52, target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
o <- splitFlip:::getSplits(X, Y, Q=5, target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
o
library(splitFlip)
?splitFlip
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
splitFlip:::getSplits(X, Y, Q=1, target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
splitFlip:::getSplits(X, Y, Q=2, target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
splitFlip:::getSplits(X, Y, Q=5, target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
sel <- splitFlip:::getSplits(X, Y, Q=5, target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
sel
sel$signs
j <- 1
sel$signs[,1]
jsign <- sel$signs[,1]
qsel <- which(jsign != 0)
qsel
jsign <- sel$signs[,j] # signs for j for the different splits
jsign
qsel <- which(jsign != 0) # indices of splits that select j
qsel
sel
B <- 10
fl <- cbind(rep(1,n), replicate(B-1, 1-2*rbinom(n,1,0.5)))
n <- nrow(X)
m <- ncol(X)
fl <- cbind(rep(1,n), replicate(B-1, 1-2*rbinom(n,1,0.5)))
fl
library(splitFlip)
?splitFlip
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
maxT(G, alpha=0.1)
G2 <- splitFlip_new(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
library(splitFlip)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
maxT(G, alpha=0.1)
G2 <- splitFlip_new(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
library(splitFlip)
devtools::document()
library(splitFlip)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
maxT(G, alpha=0.1)
G2 <- splitFlip_new(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
maxT(G2, alpha=0.1)
library(splitFlip)
library(splitFlip)
#devtools::install_github("annavesely/splitFlip")
require(splitFlip)
analysisG <- function(G, alpha, inactive){
o <- rep(0,2)
tmp <- maxT(G,alpha)$rejected
o[1] <- o[1] + length(tmp)
o[2] <- o[2] + (length(intersect(tmp,inactive))>0)
return(o)
}
get_comparison <- function(m=20, prop=0.1, n=10, alpha=0.1, rho=0.5, SNR=5, nSim=1){
o <- matrix(0, ncol=2, nrow=2)
colnames(o) <- c("nRej", "FWER")
rownames(o) <- c("old", "new")
for(seed in seq(nSim)){
res <- splitFlip::simData(prop=prop, m=m, n=n, rho=rho, type="toeplitz", SNR=SNR, seed=seed)
active <- res$active
inactive <- setdiff(seq(m),active)
target <- 2*length(active)
G <- splitFlip(res$X, res$Y, exact=TRUE, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=seed)
o[1,] <- o[1,] + analysisG(G, alpha, inactive)
G <- splitFlip_new(res$X, res$Y, exact=TRUE, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=seed)
o[2,] <- o[2,] + analysisG(G, alpha, inactive)
}
o <- o/nSim
return(o)
}
# 17 seconds
o <- get_comparison(n=1)
# 17 seconds
o <- get_comparison(n=10)
# 17 seconds
o <- get_comparison(n=10)
o
get_comparison <- function(m=20, prop=0.1, n=10, alpha=0.1, rho=0.5, SNR=5, nSim=10){
o <- matrix(0, ncol=2, nrow=2)
colnames(o) <- c("nRej", "FWER")
rownames(o) <- c("old", "new")
for(seed in seq(nSim)){
res <- splitFlip::simData(prop=prop, m=m, n=n, rho=rho, type="toeplitz", SNR=SNR, seed=seed)
active <- res$active
inactive <- setdiff(seq(m),active)
target <- 2*length(active)
G <- splitFlip(res$X, res$Y, exact=TRUE, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=seed)
o[1,] <- o[1,] + analysisG(G, alpha, inactive)
G <- splitFlip_new(res$X, res$Y, exact=TRUE, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=seed)
o[2,] <- o[2,] + analysisG(G, alpha, inactive)
}
o <- o/nSim
return(o)
}
# 17 seconds
o <- get_comparison(n=10)
# 17 seconds
system.time(o <- get_comparison(n=10))
o
get_comparison <- function(m=20, prop=0.1, n=10, alpha=0.1, rho=0.5, SNR=5, nSim=100){
o <- matrix(0, ncol=2, nrow=2)
colnames(o) <- c("nRej", "FWER")
rownames(o) <- c("old", "new")
for(seed in seq(nSim)){
res <- splitFlip::simData(prop=prop, m=m, n=n, rho=rho, type="toeplitz", SNR=SNR, seed=seed)
active <- res$active
inactive <- setdiff(seq(m),active)
target <- 2*length(active)
G <- splitFlip(res$X, res$Y, exact=TRUE, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=seed)
o[1,] <- o[1,] + analysisG(G, alpha, inactive)
G <- splitFlip_new(res$X, res$Y, exact=TRUE, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=seed)
o[2,] <- o[2,] + analysisG(G, alpha, inactive)
}
o <- o/nSim
return(o)
}
# 17 seconds
system.time(o <- get_comparison(n=10))
o
system.time(o <- get_comparison(n=20, nSim=10))
o
get_comparison <- function(m=20, prop=0.1, n=10, alpha=0.1, rho=0.5, SNR=5, nSim=100){
o <- matrix(0, ncol=2, nrow=2)
colnames(o) <- c("nRej", "FWER")
rownames(o) <- c("old", "new")
for(seed in seq(nSim)){
res <- splitFlip::simData(prop=prop, m=m, n=n, rho=rho, type="toeplitz", SNR=SNR, seed=seed)
active <- res$active
inactive <- setdiff(seq(m),active)
target <- 2*length(active)
#G <- splitFlip(res$X, res$Y, exact=TRUE, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=seed)
#o[1,] <- o[1,] + analysisG(G, alpha, inactive)
G <- splitFlip_new(res$X, res$Y, exact=TRUE, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=seed)
o[2,] <- o[2,] + analysisG(G, alpha, inactive)
}
o <- o/nSim
return(o)
}
system.time(o <- get_comparison(n=20, nSim=10))
o
system.time(o <- get_comparison(n=40, nSim=10))
o
37*10/60
system.time(o <- get_comparison(n=40, nSim=100))
o
system.time(o <- get_comparison(n=20, nSim=100))
o
system.time(o <- get_comparison(n=20, nSim=200))
o
system.time(o <- get_comparison(n=40, nSim=500))
o
0.1 + 2*sqrt(0.1*0.9/500)
