# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
res <- simData2(prop=0.1, m=30, n=20, pw=0.4,seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
res <- simData2(prop=0.1, m=30, n=20, pw=0.4,seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
0.05*30
0.06*30
0.07*30
2/30
0.1*30
res <- simData2(prop=0.07, m=30, n=20,seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
res <- simData2(prop=0.05, m=30, n=20,seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
res <- simData2(prop=0.05, m=40, n=20,seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
0.05*40
3/40
res <- simData2(prop=0.07, m=40, n=20,seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
res <- simData2(prop=0.05, m=40, n=20,seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
res <- simData2(prop=0.05, m=30, n=20,seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
res <- simData2(prop=0.05, m=30, n=20,seed=1)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
res <- simData2(prop=0.05, m=30, n=20,seed=3)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
?splitFlip
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=42)
maxT(G, alpha=0.1)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=1)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=1)
maxT(G, alpha=0.1)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=3)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=1)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=3)
maxT(G, alpha=0.1)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=99)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=99)
maxT(G, alpha=0.1)
G <- splitFlip(res$X, res$Y, target=target, Q=20, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=99)
maxT(G, alpha=0.1)
G <- splitFlip(res$X, res$Y, target=target, Q=20, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=7)
maxT(G, alpha=0.1)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=7)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G <- splitFlip(res$X, res$Y, target=target, Q=20, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=7)
maxT(G, alpha=0.1)
seed <- 2
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=seed)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=seed)
# maxT algorithm
maxT(G, alpha=0.1)
seed <- 100
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=seed)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=seed)
# maxT algorithm
maxT(G, alpha=0.1)
seed <- 13
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=seed)
# maxT algorithm
maxT(G, alpha=0.1)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=seed)
# maxT algorithm
maxT(G, alpha=0.1)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=seed)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=seed)
# maxT algorithm
maxT(G, alpha=0.1)
seed <- 97
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=seed)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=seed)
# maxT algorithm
maxT(G, alpha=0.1)
seed <- 42
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=seed)
# maxT algorithm
maxT(G, alpha=0.1)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=seed)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=seed)
# maxT algorithm
maxT(G, alpha=0.1)
devtools::document()
?splitFlip
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
?simData2
# generate linear regression data with 30 variables and 20 observations
res <- simData2(prop=0.05, m=30, n=20, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE, seed=42)
# maxT algorithm
maxT(G)
library(splitFlip)
library(splitFlip)
remove.packages("splitFlip", lib="~/R/win-library/4.0")
devtools::install_github("annavesely/splitFlip")
devtools::install_github("annavesely/splitFlip")
devtools
devtools::
devtools::document()
?targetOracle
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
target <- 2*length(res$active)
targetOracle(res$X, res$Y, target, res$active)
targetOracle(res$X, res$Y, target, res$active)
devtools::document()
devtools::document()
library(splitFlip)
library(splitFlip)
remove.packages("splitFlip", lib="~/R/win-library/4.0")
devtools::install_github("annavesely/splitFlip")
require(splitFlip)
?splitFlip
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
?targetOracle
targetOracle
devtools::document()
?targetOracle
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# selection of at most target variables, including the active ones
targetOracle(X, Y, target, active)
?splitFlip
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=1)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=1)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.05, m=30, n=10, rho=0.5, type="toeplitz", seed=1)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=1)
# maxT algorithm
maxT(G, alpha=0.1)
devtools::document()
library(splitFlip)
remove.packages("splitFlip", lib="~/R/win-library/4.0")
devtools::install_github("annavesely/splitFlip")
require(splitFlip)
?splitFlip
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
res <- simData(prop = 0.1, m = 20, n = 10, rho = 0.5, type = "toeplitz", seed = 42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
active
target <- 2 * length(active)
targetLasso(X, Y, target)
targetLasso(X, Y, target)
targetOracle(X, Y, target, toSel = active)
targetOracle(X, Y, target, toSel = active)
targetOracle(X, Y, target, toSel = active)
G <- splitFlip(X, Y, Q = 10, exact = TRUE, target = target, varSel = targetLasso, seed = 42)
maxT(G, alpha = 0.1)
res <- simData(prop = 0.05, m = 100, n = 100, rho = 0.5, type = "toeplitz", seed = 42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
active
target <- 2 * length(active)
G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetLasso, seed = 42)
maxT(G, alpha = 0.1)
G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetOracle, varSelArgs=list(toSel=active), seed = 42)
maxT(G, alpha = 0.1)
maxT(G, alpha = 0.05)
system.time(G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetLasso, seed = 42))
maxT(G, alpha = 0.05)
system.time(G <- splitFlip(X, Y, Q = 10, exact = TRUE, target = target, varSel = targetLasso, seed = 42))
maxT(G, alpha = 0.05)
system.time(G <- splitFlip(X, Y, Q = 10, exact = TRUE, target = target, varSel = targetLasso, seed = 42))
system.time(G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetOracle, seed = 42))
system.time(G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetOracle, varSelArgs=list(toSel=active), seed = 42))
system.time(G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetOracle, varSelArgs=list(toSel=active), seed = 42))
system.time(G <- splitFlip(X, Y, Q = 10, exact = TRUE, target = target, varSel = targetOracle, varSelArgs=list(toSel=active), seed = 42))
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, exact=F, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
res <- simData(prop = 0.05, m = 100, n = 100, rho = 0.5, type = "toeplitz", seed = 42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
target <- 2 * length(active)
G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetLasso, seed = 42)
maxT(G, alpha = 0.05)
res <- simData(prop = 0.05, m = 100, n = 80, rho = 0.5, type = "toeplitz", seed = 42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
target <- 2 * length(active)
G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetLasso, seed = 42)
maxT(G, alpha = 0.05)
system.time(G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetLasso, seed = 42))
system.time(G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetLasso, seed = 42))
system.time(G <- splitFlip(X, Y, Q = 10, exact = TRUE, target = target, varSel = targetLasso, seed = 42))
maxT(G, alpha = 0.05)
system.time(G <- splitFlip(X, Y, Q = 10, exact = TRUE, target = target, varSel = targetLasso, seed = 42))
?simData
res <- simData(prop = 0.05, m = 100, n = 80, rho = 0.5, type = "toeplitz", SNR=2, seed = 42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
target <- 2 * length(active)
system.time(G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetLasso, seed = 42))
maxT(G, alpha = 0.05)
res <- simData(prop = 0.05, m = 100, n = 80, rho = 0.5, type = "toeplitz", SNR=1, seed = 42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
target <- 2 * length(active)
system.time(G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetLasso, seed = 42))
maxT(G, alpha = 0.05)
system.time(G <- splitFlip(X, Y, Q = 10, exact = TRUE, target = target, varSel = targetLasso, seed = 42))
?simData
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetLasso, seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=1, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetLasso, seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
devtools::document()
?maxT
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with Lasso selection
G <- splitFlip(X, Y, target=target, seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with Lasso selection
G <- splitFlip(X, Y, target=target, exact=T, seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
?splitFlip
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G1 <- splitFlip(X, Y, target=target, exact=TRUE, seed=42)
# maxT algorithm
maxT(G1, alpha=0.1)
G2 <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G2, alpha=0.1)
devtools::document()
?maxT
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=4, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with Lasso selection
G <- splitFlip(X, Y, target=target, seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
?splitFlip
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=4, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G1 <- splitFlip(X, Y, target=target, exact=TRUE, seed=42)
# maxT algorithm
maxT(G1, alpha=0.1)
G2 <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G2, alpha=0.1)
?simData
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=4, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with Lasso selection
G <- splitFlip(X, Y, target=target, seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
?simData2
# generate linear regression data with 30 variables and 20 observations
res <- simData2(prop=0.05, m=30, n=20, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(X, Y, target=target, exact=TRUE, seed=42)
# maxT algorithm
maxT(G)
library(splitFlip)
devtools::document()
library(splitFlip)
remove.packages("splitFlip", lib="~/R/win-library/4.0")
devtools::install_github("annavesely/splitFlip")
