m <- 10 # variables
active <- c(1,2)
beta <- rep(0,m)
beta[active] <- 5
X <- matrix(rnorm(m*n), ncol=m)
Y <- rnorm(n=n, mean=X %*% beta)
target <- 4
out <- getSplits(X, Y, Q=3, target, varSel=targetOracle, varSelArgs=list(m=m, active=active))
out
out$vars
out$obs
devtools::document()
out$vars
devtools::document()
?getSplits
devtools::document()
?getSplits
?do.call
devtools::document()
?residualMatrix
devtools::document()
?residualMatrix
devtools::document()
devtools::document()
?stdScore
devtools::document()
?stdScore
devtools::document()
?stdScore
devtools::document()
?stdScore
devtools::document()
?stdScore
devtools::document()
?stdScore
devtools::document()
?stdScore
devtools::document()
?stdScore
devtools::document()
?stdScore
devtools::document()
devtools::document()
devtools::document()
?stdScore
devtools::document()
devtools::document()
?jsplitFlip
devtools::document()
?jsplitFlip
devtools::document()
hdi::multi.split
do.call(sum, args(c(2,3)))
?sum
do.call(sum, args=list(x=c(1,2)))
do.call(summm, args=list(x=c(1,2)))
do.call(mean, args=list(x=c(1,2)))
do.call(Y, args=list(x=c(1,2)))
?do.call
do.call
is.logical(FALSE)
is.logical(1)
is.logical(0)
exact
exact <- T
is.logical(exact)
exact <- NULL
is.logical(exact)
devtools::document()
?splitFlip
devtools::document()
?splitFlip
m <- 2
!is.numeric(m) || !is.finite(m) || round(m) <= 0
m <- -1
!is.numeric(m) || !is.finite(m) || round(m) <= 0
m <- NULL
!is.numeric(m) || !is.finite(m) || round(m) <= 0
m <- "a"
!is.numeric(m) || !is.finite(m) || round(m) <= 0
pwo <- power.t.test(power=0.9, n=50, sig.level=0.05, type="one.sample", alternative="two.sided", sd=1)
pwo
pwo <- power.t.test(power=0.9, n=50, sig.level=0.05, type="one.sample", alternative="two.sided", sd=1)$delta
power.t.test(power=0.9, n=50, sig.level=0.05, type="one.sample", alternative="two.sided", sd=1)$delta
power.t.test(power=0.9, n=50, sig.level=0.05, type="one.sample", alternative="two.sided", sd=5)$delta
power.t.test(power=1, n=50, sig.level=0.05, type="one.sample", alternative="two.sided", sd=5)$delta
power.t.test(power=0, n=50, sig.level=0.05, type="one.sample", alternative="two.sided", sd=5)$delta
devtools::document()
?simData
devtools::document()
?simData
devtools::document()
?simData
devtools::document()
?simData
devtools::document()
?simData
res <- simData(prop=0.1, m=20, n=10, seed=42)
dim(res$X)
dim(res$active)
res$active
length(res$Y)
devtools::document()
?simData
res <- simData(prop=0.1, m=20, n=10, seed=42)
G1 <- splitFlip(X, Y, Q=5, B=20, target=4, exact=T, varSel=targetLasso, varSelArgs=NULL)
dim(X)
G1 <- splitFlip(res$X, res$Y, Q=5, B=20, target=4, exact=T, varSel=targetLasso, varSelArgs=NULL)
dim(G1)
head(round(G1,2))
res$active
G <- splitFlip(res$X, res$Y, Q=5, exact=TRUE)
G <- splitFlip(res$X, res$Y, target=target, Q=5, exact=TRUE)
devtools::document()
devtools::document()
devtools::document()
simData
?simData
res <- simData(prop=0.1, m=20, n=10, seed=42)
dim(res$X)
target <- 2*length(res$active)
target
G <- splitFlip(res$X, res$Y, target=target, Q=5, exact=TRUE)
dim(G)
head(round(G,2))
G <- splitFlip(res$X, res$Y, Q=5, exact=TRUE)
devtools::document()
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with 5 data splits and Lasso selection
G <- splitFlip(res$X, res$Y, target=target, Q=5, exact=TRUE)
G <- splitFlip(res$X, res$Y, Q=5, exact=TRUE)
dim(G)
head(round(G,2))
G <- splitFlip(res$X, res$Y, target=target, Q=10, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
dim(G)
head(round(G,2))
devtools::document()
?simData
devtools::document()
?simData
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with 5 data splits and Lasso selection
G1 <- splitFlip(res$X, res$Y, target=target, Q=5, B=6, exact=TRUE)
round(G1,2)
G2 <- splitFlip(res$X, res$Y, target=target, Q=10, B=6,
varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
round(G2,2)
res <- simData(prop=0.1, m=20, n=10, seed=42)
target <- 2*length(res$active)
target
targetLasso(res$X, res$Y, target)
devtools::document()
?targetLasso
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# selection of at most target variables using the Lasso
targetLasso(res$X, res$Y, target)
?targetOracle
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# selection of at most target variables, including the active ones
targetOracle(res$X, res$Y, target, ncol(res$X), res$active)
devtools::document()
?splitFlip
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with 10 data splits and Lasso selection
G1 <- splitFlip(res$X, res$Y, target=target, B=6, exact=TRUE)
round(G1,2)
devtools::document()
?splitFlip
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with 10 data splits and Lasso selection
G1 <- splitFlip(res$X, res$Y, target=target, B=6, exact=TRUE)
round(G1,2)
G2 <- splitFlip(res$X, res$Y, target=target, Q=5, B=6,
varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
round(G2,2)
devtools::document()
?splitFlip
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with 10 data splits and Lasso selection
G1 <- splitFlip(res$X, res$Y, target=target, B=6, exact=TRUE)
round(G1,2)
G2 <- splitFlip(res$X, res$Y, target=target, Q=5, B=6,
varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
round(G2,2)
?targetLasso
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# selection of at most target variables using the Lasso
targetLasso(res$X, res$Y, target)
?targetOracle
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# selection of at most target variables, including the active ones
targetOracle(res$X, res$Y, target, ncol(res$X), res$active)
devtools::document()
?simData
devtools::document()
?simData
?simData
res <- simData(prop=0.1, m=20, n=10, seed=42)
round(res$X,2)
round(res$Y,2)
res$active
library(splitFlip)
?splitFlip
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with 10 data splits and Lasso selection
G1 <- splitFlip(res$X, res$Y, target=target, B=6, exact=TRUE)
round(G1,2)
G2 <- splitFlip(res$X, res$Y, target=target, Q=5, B=6,
varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
round(G2,2)
devtools::document()
?simData
devtools::document()
?simData
library(splitFlip)
?simData
devtools::document()
?targetOracle
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# selection of at most target variables, including the active ones
targetOracle(res$X, res$Y, target, ncol(res$X), res$active)
devtools::document()
?getSplits
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
o <- getSplits(X, Y, Q=2, target, varSel=targetOracle, varSelArgs=list(m=20, active=c(1,2)), seed=NULL)
o <- getSplits(res$X, res$Y, Q=2, target, varSel=targetOracle, varSelArgs=list(m=20, active=c(1,2)), seed=NULL)
o
o <- getSplits(res$X, res$Y, Q=2, target, varSel=targetOracle, varSelArgs=list(m=20, active=c(1,2)), seed=NULL)
o
o <- getSplits(res$X, res$Y, Q=2, target, varSel=targetOracle, varSelArgs=list(m=20, active=c(1,2)), seed=1)
o
o <- getSplits(res$X, res$Y, Q=2, target, varSel=targetOracle, varSelArgs=list(m=20, active=c(1,2)), seed=1)
o
o <- getSplits(res$X, res$Y, Q=2, target, varSel=targetOracle, varSelArgs=list(m=20, active=c(1,2)), seed=1)
o
devtools::document()
devtools::document()
?splitFlip
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G1 <- splitFlip(res$X, res$Y, target=target, B=6, exact=TRUE, seed=42)
G0 <- splitFlip(res$X, res$Y, target=target, B=6, exact=TRUE, seed=42)
all(G1==G0)
G0 <- splitFlip(res$X, res$Y, target=target, B=6, exact=TRUE, seed=42)
all(G1==G0)
G2 <- splitFlip(res$X, res$Y, target=target, Q=5, B=6,
varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=42)
G3 <- splitFlip(res$X, res$Y, target=target, Q=5, B=6,
varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=42)
all(G2==G3)
G4 <- splitFlip(res$X, res$Y, target=target, Q=5, B=6,
varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=42)
all(G2==G4)
library(splitFlip)
?splitFlip
?simData
devtools::document()
devtools::document()
?simData
res <- simData(prop=0.1, m=20, n=10, seed=42)
res$X
dim(res$X)
devtools::document()
?simData
res <- simData(prop=0.1, m=20, n=10, seed=42)
devtools::document()
?simData
res <- simData(prop=0.1, m=20, n=10, seed=42)
res$X
round(res$X,1)
round(res$Y,1)
X <- res$X
Y <- res$Y
length(res$active)
target <- 4
fit <- glmnet::glmnet(X, Y, family="gaussian", dfmax=target-1)
fit
L <- length(fit$lambda)
sel <- coef(fit, s=fit$lambda[L])@i
sel
X <- X[,-1]
X
dim(X)
fit <- glmnet::glmnet(X, Y, family="gaussian", dfmax=target-1)
L <- length(fit$lambda)
coef(fit, s=fit$lambda[L])@i
coef(fit, s=fit$lambda[L])@i + 1
target
fit
dfmax <- target - 1
fit <- glmnet::glmnet(X, Y, family="gaussian", dfmax=dfmax)
fit
lambdas <- fit$lambda[fit$df <= dfmax]
lambda <- lambdas[length(lambdas)]
coef(fit, s=lambda)@i + 1
fit <- glmnet::glmnet(X, Y, family="gaussian", dfmax=target-2)
L <- length(fit$lambda)
sel <- coef(fit, s=fit$lambda[L])@i + 1
sel
devtools::document()
?simData
devtools::document()
?simData
devtools::document()
?simData
res <- simData(prop=0.1, m=20, n=10, seed=42)
round(res$X,1)
round(res$Y,1)
devtools::document()
?targetLasso
res <- simData(prop=0.1, m=20, n=10, seed=42)
target <- 2*length(res$active)
target
targetLasso(res$X, res$Y, target)
dim(res$X)
targetLasso(res$X, res$Y, target=9)
targetLasso(res$X, res$Y, target=10)
targetLasso(res$X, res$Y, target=11)
devtools::document()
res <- simData(prop=0.1, m=20, n=10, seed=42)
targetLasso(res$X, res$Y, target=4)
targetLasso(res$X, res$Y, target=8)
targetLasso(res$X, res$Y, target=9)
targetLasso(res$X, res$Y, target=10)
targetLasso(res$X, res$Y, target=20)
targetLasso(res$X, res$Y)
devtools::document()
targetOracle(res$X, res$Y, target=4)
targetOracle(res$X, res$Y, target=4, m=20, active=c(1,2))
targetOracle(res$X, res$Y, target=4, m=20, active=c(1,2))
targetOracle(res$X, res$Y, target=4, m=20, active=c(1,2))
targetOracle(res$X, res$Y, target=10, m=20, active=c(1,2))
targetOracle(res$X, res$Y, target=20, m=20, active=c(1,2))
targetOracle(res$X, res$Y, target=100, m=20, active=c(1,2))
targetOracle(res$X, res$Y, target=2, m=20, active=c(1,2))
targetOracle(res$X, res$Y, target=1, m=20, active=c(1,2))
targetLasso(res$X, res$Y)
targetLasso(res$X, res$Y, target=4)
targetLasso(res$X, res$Y, target=10)
targetLasso(res$X, res$Y, target=11)
devtools::document()
devtools::document()
?splitFlip
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
res
target
G <- splitFlip(res$X, res$Y, target=target, B=6, exact=TRUE)
head(round(G,1))
G <- splitFlip(res$X, res$Y, target=target, Q=1, B=6, exact=TRUE)
head(round(G,1))
nrow(res$X)
n0 <- 5
G <- splitFlip(res$X, res$Y, target=4, Q=1, B=6, exact=TRUE)
G <- splitFlip(res$X, res$Y, target=5, Q=1, B=6, exact=TRUE)
G <- splitFlip(res$X, res$Y, target=6, Q=1, B=6, exact=TRUE)
devtools::document()
G <- splitFlip(res$X, res$Y, target=6, Q=1, B=6, exact=TRUE)
G <- splitFlip(res$X, res$Y, target=7, Q=1, B=6, exact=TRUE)
G <- splitFlip(res$X, res$Y, target=10, Q=1, B=6, exact=TRUE)
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
X <- res$X
Y <- res$Y
target <- 4
sel <- getSplits(X, Y, Q=1, target=4, varSel=targetLasso, varSelArgs=NULL, seed=1)
sel
n <- nrow(X)
m <- ncol(X)
B <- 20
fl <- cbind(rep(1,n), replicate(B-1, 1-2*rbinom(n,1,0.5)))
# create matrix of standardized scores
G <- matrix(0, ncol=m, nrow=B)
for(j in seq(m)){G[,j] <- jsplitFlip(j, X, Y, sel, fl, exact=T)}
head(round(G,1))
sel <- getSplits(X, Y, Q=1, target=5, varSel=targetLasso, varSelArgs=NULL, seed=1)
fl <- cbind(rep(1,n), replicate(B-1, 1-2*rbinom(n,1,0.5)))
# create matrix of standardized scores
G <- matrix(0, ncol=m, nrow=B)
for(j in seq(m)){G[,j] <- jsplitFlip(j, X, Y, sel, fl, exact=T)}
head(round(G,1))
sel <- getSplits(X, Y, Q=1, target=5, varSel=targetLasso, varSelArgs=NULL, seed=1)
sel <- getSplits(X, Y, Q=1, target=6, varSel=targetLasso, varSelArgs=NULL, seed=1)
fl <- cbind(rep(1,n), replicate(B-1, 1-2*rbinom(n,1,0.5)))
# create matrix of standardized scores
G <- matrix(0, ncol=m, nrow=B)
for(j in seq(m)){G[,j] <- jsplitFlip(j, X, Y, sel, fl, exact=T)}
head(round(G,1))
sel <- getSplits(X, Y, Q=3, target=6, varSel=targetLasso, varSelArgs=NULL, seed=1)
fl <- cbind(rep(1,n), replicate(B-1, 1-2*rbinom(n,1,0.5)))
# create matrix of standardized scores
G <- matrix(0, ncol=m, nrow=B)
for(j in seq(m)){G[,j] <- jsplitFlip(j, X, Y, sel, fl, exact=T)}
head(round(G,1))
n0
sel <- getSplits(X, Y, Q=1, target=6, varSel=targetLasso, varSelArgs=NULL, seed=1)
sel
sel <- getSplits(X, Y, Q=1, target=5, varSel=targetLasso, varSelArgs=NULL, seed=1)
sel
sel <- getSplits(X, Y, Q=1, target=4, varSel=targetLasso, varSelArgs=NULL, seed=1)
sel
?targetLasso
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# selection of at most target variables using the Lasso
targetLasso(res$X, res$Y, target)
targetLasso(res$X, res$Y, target=4)
targetLasso(res$X, res$Y, target=5)
targetLasso(res$X, res$Y, target=9)
targetLasso(res$X, res$Y, target=10)
res <- simData(prop=0.1, m=20, n=10, seed=1)
targetLasso(res$X, res$Y, target=10)
res <- simData(prop=0.1, m=20, n=10, seed=2)
targetLasso(res$X, res$Y, target=10)
targetLasso(res$X, res$Y, target=11)
devtools::document()
?splitFlip
res <- simData(prop=0.1, m=20, n=10, seed=42)
2*length(res$active)
G <- splitFlip(res$X, res$Y, target=4, Q=1, B=6, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
head(round(G,1))
round(G,1)
G <- splitFlip(res$X, res$Y, target=5, Q=1, B=6, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
round(G,1)
G <- splitFlip(res$X, res$Y, target=6, Q=1, B=6, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
devtools::document()
G <- splitFlip(res$X, res$Y, target=6, Q=1, B=6, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
devtools::document()
round(G,1)
G <- splitFlip(res$X, res$Y, target=7, Q=1, B=6, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
G <- splitFlip(res$X, res$Y, target=6, Q=1, B=6, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
G <- splitFlip(res$X, res$Y, target=6, Q=1, B=6, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
G <- splitFlip(res$X, res$Y, target=6, Q=1, B=6, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
G <- splitFlip(res$X, res$Y, target=6, Q=1, B=6, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
G <- splitFlip(res$X, res$Y, target=6, Q=1, B=6, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
G <- splitFlip(res$X, res$Y, target=6, Q=1, B=6, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
round(G,1)
devtools::document()
G <- splitFlip(res$X, res$Y, target=6, Q=1, B=6, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
G <- splitFlip(res$X, res$Y, target=5, Q=1, B=6, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
ncol(X)
ncol(X)/2
devtools::document()
G <- splitFlip(res$X, res$Y, target=5, Q=1, B=6, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
G <- splitFlip(res$X, res$Y, target=5, Q=1, B=6, varSel=targetLasso, varSelArgs=NULL)
round(G,1)
X <- res$X
Y <- res$Y
X <- X[,-1]
target <- 5
fit <- glmnet::glmnet(X, Y, family="gaussian", dfmax=target-2)
fit
L <- length(fit$lambda)
coef(fit, s=fit$lambda[L])@i + 1
res <- simData(prop=0.1, m=20, n=10, seed=1)
G <- splitFlip(res$X, res$Y, target=5, Q=1, B=6, varSel=targetLasso, varSelArgs=NULL)
round(G,1)
res <- simData(prop=0.1, m=20, n=10, seed=2)
G <- splitFlip(res$X, res$Y, target=5, Q=1, B=6, varSel=targetLasso, varSelArgs=NULL)
round(G,1)
devtools::document()
library(splitFlip)
?simData
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with 10 data splits and Lasso selection
G1 <- splitFlip(res$X, res$Y, target=target, B=6, exact=TRUE)
round(G1,2)
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with 10 data splits and Lasso selection
G1 <- splitFlip(res$X, res$Y, target=target, Q=1, B=6, exact=TRUE)
round(G1,2)
