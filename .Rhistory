Ltype <- 5
df <- data.frame(
n = n,
incrBeta = incrBeta + 0,
m = m,
m1 = m1,
rho = rho,
type = corType,
SNR = rep(SNR, each=Ltype),
Q = Q,
method = rep(c("AO", "AL", "MO", "ML", "BM"), Lsnr),
nRej = 0,
FWER = 0,
time = 0
)
if((corType == "toeplitz") && (rho != 0)){
r <- rho^(0:(m - 1))
Sigma <- stats::toeplitz(r)
eig <- eigen(Sigma)
}
nSim <- length(seeds)
if(!(s %% 10)){print(paste0(s, "/", nSim))}
set.seed(seeds[s])
if(rho == 0){
X <- matrix(rnorm(n*m), ncol=m)
}else if(corType == "equi"){
X <- sqrt(1-rho) * matrix(rnorm(m*n), ncol=m) + sqrt(rho) * matrix(rep(rnorm(n), m), ncol=m)
}else{
X <- matrix(rnorm(n*m), ncol=m) %*% diag(sqrt(eig$values)) %*% t(eig$vectors)
}
active <- sample(seq(m), m1)
beta <- rep(0, m)
if(incrBeta){
beta[active] <- seq(m1)
}else{
beta[active] <- rep(1,m1)
}
active <- sort(active)
target <- 2*m1
mu <- X %*% beta
mu_var <- var(mu) * (n-1) / n
serr <- sqrt(mu_var/SNR[i])
Y <- rnorm(n=n, mean=mu, sd=serr)
k <- (i-1)*Ltype + 1
df[k,12] <- df[k,12] + system.time(df[k,10:11] <- df[k,10:11] + appr(X, Y, Q, B, active, target, "oracle", alpha, seeds[s]))[3]
df[k+1,12] <- df[k+1,12] + system.time(df[k+1,10:11] <- df[k+1,10:11] + appr(X, Y, Q, B, active, target, "lassoT", oracle=FALSE, alpha, seeds[s]))[3]
df[k+1,12] <- df[k+1,12] + system.time(df[k+1,10:11] <- df[k+1,10:11] + appr(X, Y, Q, B, active, target, "lassoT", alpha, seeds[s]))[3]
df
require(splitFlip)
require(hdi)
getResSim <- function(p, alpha, active){
rej <- (p <= alpha) + 0
nRej <- sum(rej)
FWER <- (sum(rej[-active]) > 0)
out <- c(nRej, FWER)
return(out)
}
appr <- function(X, Y, Q, B, active, target, an, alpha, seed){
if(an=="oracle"){
varSel <- selOracle
varSelArgs <- list(toSel=active)
}else if(an=="lassoT"){
varSel <- selLasso
varSelArgs <- NULL
}else{
target <- NULL
varSel <- selLasso
varSelArgs <- NULL
}
G <- splitFlip(X, Y, Q, B, target, varSel, varSelArgs, exact=FALSE, seed=seed)
p <- maxT(G)$pvalues
out <- getResSim(p, alpha, active)
return(out)
}
mein <- function(X, Y, Q, active, target, an, alpha, seed){
if(an=="oracle"){
varSel <- function(x, y, target, toSel){return(selOracle(x, y, target, toSel))}
varSelArgs <- list(target=target, toSel=active)
}else if(an=="lassoT"){
varSel <- hdi::lasso.firstq
varSelArgs <- list(q=target)
}else{
varSel <- hdi::lasso.cv
varSelArgs <- NULL
}
set.seed(seed)
p <- hdi::multi.split(x=X, y=Y, B=Q, ci=FALSE, model.selector=varSel, args.model.selector=varSelArgs)$pval.corr
out <- getResSim(p, alpha, active)
return(out)
}
bm <- function(X, Y, active, alpha, seed){
set.seed(seed)
p <- hdi::ridge.proj(X, Y)$pval.corr
out <- getResSim(p, alpha, active)
return(out)
}
m=100
m1=5
n=50
rho=0.5
corType="toeplitz"
SNR=4
incrBeta=FALSE
alpha=0.05
Q=50
B=200
seeds=1
s <- 1
i <- 1
print(paste0("Start: type = ", corType, ", rho = ", rho))
corType <- match.arg(tolower(corType), c("toeplitz", "equi"))
Lsnr <- length(SNR)
method <- c("AO", "ALt", "ALcv", "MO", "MLt", "MLcv", "BM")
Lmethod <- length(methpd)
df <- data.frame(
n = n,
incrBeta = incrBeta + 0,
m = m,
m1 = m1,
rho = rho,
type = corType,
SNR = rep(SNR, each=Lmethod),
Q = Q,
method = rep(method, Lsnr),
nRej = 0,
FWER = 0,
time = 0
)
Lmethod <- length(method)
df <- data.frame(
n = n,
incrBeta = incrBeta + 0,
m = m,
m1 = m1,
rho = rho,
type = corType,
SNR = rep(SNR, each=Lmethod),
Q = Q,
method = rep(method, Lsnr),
nRej = 0,
FWER = 0,
time = 0
)
df
if((corType == "toeplitz") && (rho != 0)){
r <- rho^(0:(m - 1))
Sigma <- stats::toeplitz(r)
eig <- eigen(Sigma)
}
nSim <- length(seeds)
for(s in seq(nSim)){
if(!(s %% 10)){print(paste0(s, "/", nSim))}
set.seed(seeds[s])
if(rho == 0){
X <- matrix(rnorm(n*m), ncol=m)
}else if(corType == "equi"){
X <- sqrt(1-rho) * matrix(rnorm(m*n), ncol=m) + sqrt(rho) * matrix(rep(rnorm(n), m), ncol=m)
}else{
X <- matrix(rnorm(n*m), ncol=m) %*% diag(sqrt(eig$values)) %*% t(eig$vectors)
}
active <- sample(seq(m), m1)
beta <- rep(0, m)
if(incrBeta){
beta[active] <- seq(m1)
}else{
beta[active] <- rep(1,m1)
}
active <- sort(active)
target <- 2*m1
mu <- X %*% beta
mu_var <- var(mu) * (n-1) / n
# mu <- X %*% beta
# mu_norm <- sqrt(t(mu) %*% mu)
for(i in seq(Lsnr)){
serr <- sqrt(mu_var/SNR[i])
Y <- rnorm(n=n, mean=mu, sd=serr)
k <- (i-1)*Lmethod + 1
df[k,12] <- df[k,12] + system.time(df[k,10:11] <- df[k,10:11] + appr(X, Y, Q, B, active, target, "oracle", alpha, seeds[s]))[3]
df[k+1,12] <- df[k+1,12] + system.time(df[k+1,10:11] <- df[k+1,10:11] + appr(X, Y, Q, B, active, target, "lassoT", alpha, seeds[s]))[3]
df[k+2,12] <- df[k+2,12] + system.time(df[k+2,10:11] <- df[k+2,10:11] + mein(X, Y, Q, active, oracle=TRUE, alpha, seeds[s]))[3]
df[k+3,12] <- df[k+3,12] + system.time(df[k+3,10:11] <- df[k+3,10:11] + mein(X, Y, Q, active, oracle=FALSE, alpha, seeds[s]))[3]
df[k+4,12] <- df[k+4,12] + system.time(df[k+4,10:11] <- df[k+4,10:11] + bm(X, Y, active, alpha, seeds[s]))[3]
}
}
require(splitFlip)
require(hdi)
getResSim <- function(p, alpha, active){
rej <- (p <= alpha) + 0
nRej <- sum(rej)
FWER <- (sum(rej[-active]) > 0)
out <- c(nRej, FWER)
return(out)
}
appr <- function(X, Y, Q, B, active, target, an, alpha, seed){
if(an=="oracle"){
varSel <- selOracle
varSelArgs <- list(toSel=active)
}else if(an=="lassoT"){
varSel <- selLasso
varSelArgs <- NULL
}else{
target <- NULL
varSel <- selLasso
varSelArgs <- NULL
}
G <- splitFlip(X, Y, Q, B, target, varSel, varSelArgs, exact=FALSE, seed=seed)
p <- maxT(G)$pvalues
out <- getResSim(p, alpha, active)
return(out)
}
mein <- function(X, Y, Q, active, target, an, alpha, seed){
if(an=="oracle"){
varSel <- function(x, y, target, toSel){return(selOracle(x, y, target, toSel))}
varSelArgs <- list(target=target, toSel=active)
}else if(an=="lassoT"){
varSel <- hdi::lasso.firstq
varSelArgs <- list(q=target)
}else{
varSel <- hdi::lasso.cv
varSelArgs <- NULL
}
set.seed(seed)
p <- hdi::multi.split(x=X, y=Y, B=Q, ci=FALSE, model.selector=varSel, args.model.selector=varSelArgs)$pval.corr
out <- getResSim(p, alpha, active)
return(out)
}
bm <- function(X, Y, active, alpha, seed){
set.seed(seed)
p <- hdi::ridge.proj(X, Y)$pval.corr
out <- getResSim(p, alpha, active)
return(out)
}
m=100
m1=5
n=50
rho=0.5
corType="toeplitz"
SNR=4
incrBeta=FALSE
alpha=0.05
Q=50
B=200
seeds=1
s <- 1
i <- 1
print(paste0("Start: type = ", corType, ", rho = ", rho))
corType <- match.arg(tolower(corType), c("toeplitz", "equi"))
Lsnr <- length(SNR)
method <- c("AO", "ALt", "ALcv", "MO", "MLt", "MLcv", "BM")
Lmethod <- length(method)
df <- data.frame(
n = n,
incrBeta = incrBeta + 0,
m = m,
m1 = m1,
rho = rho,
type = corType,
SNR = rep(SNR, each=Lmethod),
Q = Q,
method = rep(method, Lsnr),
nRej = 0,
FWER = 0,
time = 0
)
if((corType == "toeplitz") && (rho != 0)){
r <- rho^(0:(m - 1))
Sigma <- stats::toeplitz(r)
eig <- eigen(Sigma)
}
nSim <- length(seeds)
set.seed(seeds[s])
if(rho == 0){
X <- matrix(rnorm(n*m), ncol=m)
}else if(corType == "equi"){
X <- sqrt(1-rho) * matrix(rnorm(m*n), ncol=m) + sqrt(rho) * matrix(rep(rnorm(n), m), ncol=m)
}else{
X <- matrix(rnorm(n*m), ncol=m) %*% diag(sqrt(eig$values)) %*% t(eig$vectors)
}
active <- sample(seq(m), m1)
beta <- rep(0, m)
if(incrBeta){
beta[active] <- seq(m1)
}else{
beta[active] <- rep(1,m1)
}
active <- sort(active)
target <- 2*m1
mu <- X %*% beta
mu_var <- var(mu) * (n-1) / n
serr <- sqrt(mu_var/SNR[i])
Y <- rnorm(n=n, mean=mu, sd=serr)
k <- (i-1)*Lmethod + 1
df[k,12] <- df[k,12] + system.time(df[k,10:11] <- df[k,10:11] + appr(X, Y, Q, B, active, target, "oracle", alpha, seeds[s]))[3]
df[k+1,12] <- df[k+1,12] + system.time(df[k+1,10:11] <- df[k+1,10:11] + appr(X, Y, Q, B, active, target, "lassoT", alpha, seeds[s]))[3]
df
k <- k+1
k <- k+1
df[k,12] <- df[k,12] + system.time(df[k,10:11] <- df[k,10:11] + appr(X, Y, Q, B, active, target, "lassoCV", alpha, seeds[s]))[3]
df
df[k,12] <- df[k,12] + system.time(df[k,10:11] <- df[k,10:11] + mein(X, Y, Q, B, active, target, "oracle", alpha, seeds[s]))[3]
df[k,12] <- df[k,12] + system.time(df[k,10:11] <- df[k,10:11] + mein(X, Y, Q, active, target, "oracle", alpha, seeds[s]))[3]
df
k <- k+1
df[k,12] <- df[k,12] + system.time(df[k,10:11] <- df[k,10:11] + mein(X, Y, Q, active, target, "lassoT", alpha, seeds[s]))[3]
require(splitFlip)
require(hdi)
getResSim <- function(p, alpha, active){
rej <- (p <= alpha) + 0
nRej <- sum(rej)
FWER <- (sum(rej[-active]) > 0)
out <- c(nRej, FWER)
return(out)
}
appr <- function(X, Y, Q, B, active, target, an, alpha, seed){
if(an=="oracle"){
varSel <- selOracle
varSelArgs <- list(toSel=active)
}else if(an=="lassoT"){
varSel <- selLasso
varSelArgs <- NULL
}else{
target <- NULL
varSel <- selLasso
varSelArgs <- NULL
}
G <- splitFlip(X, Y, Q, B, target, varSel, varSelArgs, exact=FALSE, seed=seed)
p <- maxT(G)$pvalues
out <- getResSim(p, alpha, active)
return(out)
}
mein <- function(X, Y, Q, active, target, an, alpha, seed){
if(an=="oracle"){
varSel <- function(x, y, target, toSel){return(selOracle(x, y, target, toSel))}
varSelArgs <- list(target=target, toSel=active)
}else if(an=="lassoT"){
varSel <- hdi::lasso.firstq
varSelArgs <- list(q=target)
}else{
varSel <- hdi::lasso.cv
varSelArgs <- NULL
}
set.seed(seed)
p <- hdi::multi.split(x=X, y=Y, B=Q, ci=FALSE, model.selector=varSel, args.model.selector=varSelArgs)$pval.corr
out <- getResSim(p, alpha, active)
return(out)
}
bm <- function(X, Y, active, alpha, seed){
set.seed(seed)
p <- hdi::ridge.proj(X, Y)$pval.corr
out <- getResSim(p, alpha, active)
return(out)
}
m=100
m1=5
n=50
rho=0.5
corType="toeplitz"
SNR=4
incrBeta=FALSE
alpha=0.05
Q=50
B=200
seeds=1
s <- 1
i <- 1
# --------------------------------------
print(paste0("Start: type = ", corType, ", rho = ", rho))
corType <- match.arg(tolower(corType), c("toeplitz", "equi"))
Lsnr <- length(SNR)
method <- c("AO", "ALt", "ALcv", "MO", "MLt", "MLcv", "BM")
Lmethod <- length(method)
df <- data.frame(
n = n,
incrBeta = incrBeta + 0,
m = m,
m1 = m1,
rho = rho,
type = corType,
SNR = rep(SNR, each=Lmethod),
Q = Q,
method = rep(method, Lsnr),
nRej = 0,
FWER = 0,
time = 0
)
if((corType == "toeplitz") && (rho != 0)){
r <- rho^(0:(m - 1))
Sigma <- stats::toeplitz(r)
eig <- eigen(Sigma)
}
nSim <- length(seeds)
if(!(s %% 10)){print(paste0(s, "/", nSim))}
set.seed(seeds[s])
if(rho == 0){
X <- matrix(rnorm(n*m), ncol=m)
}else if(corType == "equi"){
X <- sqrt(1-rho) * matrix(rnorm(m*n), ncol=m) + sqrt(rho) * matrix(rep(rnorm(n), m), ncol=m)
}else{
X <- matrix(rnorm(n*m), ncol=m) %*% diag(sqrt(eig$values)) %*% t(eig$vectors)
}
active <- sample(seq(m), m1)
beta <- rep(0, m)
if(incrBeta){
beta[active] <- seq(m1)
}else{
beta[active] <- rep(1,m1)
}
active <- sort(active)
target <- 2*m1
mu <- X %*% beta
mu_var <- var(mu) * (n-1) / n
serr <- sqrt(mu_var/SNR[i])
Y <- rnorm(n=n, mean=mu, sd=serr)
k <- (i-1)*Lmethod + 1
df[k,12] <- df[k,12] + system.time(df[k,10:11] <- df[k,10:11] + appr(X, Y, Q, B, active, target, "oracle", alpha, seeds[s]))[3]
k <- k+1
df[k,12] <- df[k,12] + system.time(df[k,10:11] <- df[k,10:11] + appr(X, Y, Q, B, active, target, "lassoT", alpha, seeds[s]))[3]
k <- k+1
df[k,12] <- df[k,12] + system.time(df[k,10:11] <- df[k,10:11] + appr(X, Y, Q, B, active, target, "lassoCV", alpha, seeds[s]))[3]
k <- k+1
df[k,12] <- df[k,12] + system.time(df[k,10:11] <- df[k,10:11] + mein(X, Y, Q, active, target, "oracle", alpha, seeds[s]))[3]
k <- k+1
df[k,12] <- df[k,12] + system.time(df[k,10:11] <- df[k,10:11] + mein(X, Y, Q, active, target, "lassoT", alpha, seeds[s]))[3]
k <- k+1
df[k,12] <- df[k,12] + system.time(df[k,10:11] <- df[k,10:11] + mein(X, Y, Q, active, target, "lassoCV", alpha, seeds[s]))[3]
k <- k+1
df[k,12] <- df[k,12] + system.time(df[k,10:11] <- df[k,10:11] + bm(X, Y, Q, active, alpha, seeds[s]))[3]
bm <- function(X, Y, active, alpha, seed){
set.seed(seed)
p <- hdi::ridge.proj(X, Y)$pval.corr
out <- getResSim(p, alpha, active)
return(out)
}
df[k,12] <- df[k,12] + system.time(df[k,10:11] <- df[k,10:11] + bm(X, Y, active, alpha, seeds[s]))[3]
df
?selLasso
?simData
?selLasso
?selCorrelation
?splitFlip
res <- simData(m1=2, m = 20, n = 10, rho = 0.5, type = "toeplitz", SNR = 5, seed = 42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
target <- 2*length(active)
selLasso(X, Y, target)
active
selLasso(X, Y)
selCorrelation(X, Y, target)
selOracle(X, Y, target, toSel = active)
G <- splitFlip(X, Y, target = target, varSel = selLasso, seed = 42)
maxT(G, alpha = 0.05)
G <- splitFlip(X, Y, target = NULL, varSel = selLasso, seed = 42)
maxT(G, alpha = 0.05)
G <- splitFlip(X, Y, target, varSel = selLasso, varSelArgs = list(toSel = active), seed = 42)
maxT(G, alpha = 0.05)
G <- splitFlip(X, Y, target, varSel = selLasso, varSelArgs = list(toSel = active), seed = 43)
maxT(G, alpha = 0.05)
G <- splitFlip(X, Y, target, varSel = selOracle, varSelArgs = list(toSel = active), seed = 43)
G <- splitFlip(X, Y, target, varSel = selOracle, varSelArgs = list(toSel = active), seed = 43)
target
?splitFlip
res <- simData(m1=2, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# standardized scores using the approximate method with Lasso selection of target variables
G1 <- splitFlip(X, Y, target=target, seed=42)
# maxT algorithm
maxT(G1, alpha=0.1)
G2 <- splitFlip(X, Y, target=target, varSel=selOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G2, alpha=0.1)
res <- simData(m1=2, m = 20, n = 10, rho = 0.5, type = "toeplitz", SNR = 5, seed = 42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
G <- splitFlip(X, Y, target = target, varSel = selOracle, varSelArgs = list(toSel = active), seed = 42)
target <- 2*length(active)
G <- splitFlip(X, Y, target = target, varSel = selOracle, varSelArgs = list(toSel = active), seed = 42)
maxT(G,0.05)
G <- splitFlip(X, Y, target = target, varSel = selOracle, varSelArgs = list(toSel = active), seed = 43)
maxT(G,0.05)
maxT(G,0.1)
maxT(G,0.05)
G <- splitFlip(X, Y, target = target, varSel = selOracle, varSelArgs = list(toSel = active), seed = 44)
maxT(G,0.05)
devtools::document()
install.packages("knitr")
devtools::document()
install.packages("hdi")
library(splitFlip)
devtools::document()
install.packages("devtools", dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
install.packages("knitr")
require(knitr)
require(devtools)
devtools::document()
install.packages("xfun")
install.packages("xfun", type="binary")
install.packages("knitr")
devtools::document()
devtools::document()
install.packages("mvtnorm")
devtools::document()
library(splitFlip)
type="unsigned"
type <- match.arg(type, c("unsigned","sign1","sign2"))
type
