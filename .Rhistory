devtools::document()
?lm
?glmnet::glmnet
is.matrix(x)
devtools::document()
?targetLasso
library(splitFlip)
devtools::document()
?targetLasso
roxygen2::roxygenise()
devtools::document()
?targetLasso
?glmnet::glmnet
devtools::document()
?targetLasso
devtools::document()
?targetOracle
fit <- glmnet::glmnet(x, y, family="gaussian", dfmax=target-1)
devtools::document()
?targetLasso
devtools::document()
?targetLasso
?targetOracle
?elsif
?else
?f
?if
)
devtools::document()
?targetOracle
n <- 5
m <- 10
beta <- c(5,5, rep(0,8))
beta
X <- matrix(rnorm(m*n), ncol=m)
Y <- rnorm(n=n, mean=X %*% beta)
targetLasso <- function(x, y, target=NULL){
if(!is.matrix(x) || !is.numeric(x) || !all(is.finite(x))){stop("x must be a matrix of finite numbers")}
if(!is.vector(y) || !is.numeric(y) || !all(is.finite(y))){stop("y must be a vector of finite numbers")}
if(!(nrow(x)==length(y))){stop("Dimensions of x and y are incompatible")}
if(is.null(target)){target <- nrow(x)}
if(!is.numeric(target) || !is.finite(target)){stop("target must be a positive number")}
target <- floor(target)
if(target <= 0){stop("target must be a positive integer")}
fit <- glmnet::glmnet(x, y, family="gaussian", dfmax=target-1)
L <- length(fit$lambda)
sel <- coef(fit, s=fit$lambda[L])@i
if(sel[1]==0){sel <- sel[-1]}
return(sel)
}
targetLasso(X, Y, target=4)
devtools::document()
devtools::document()
devtools::document()
?targetLasso
set.seed(42)
n <- 5 # observations
m <- 10 # variables
active <- c(1,2)
beta <- rep(0,m)
beta[active] <- 5
beta
X <- matrix(rnorm(m*n), ncol=m)
Y <- rnorm(n=n, mean=X %*% beta)
target <- 4
targetLasso(X, Y, target)
?targetOracle
targetOracle(X, Y, target, m, active)
devtools::document()
?targetOracle
set.seed(42)
n <- 5 # observations
m <- 10 # variables
active <- c(1,2)
beta <- rep(0,m)
beta[active] <- 5
x <- matrix(rnorm(m*n), ncol=m)
y <- rnorm(n=n, mean=X %*% beta)
target <- 4
targetOracle(x, y, target, m, active)
?targetLasso
set.seed(42)
n <- 5 # observations
m <- 10 # variables
active <- c(1,2)
beta <- rep(0,m)
beta[active] <- 5
x <- matrix(rnorm(m*n), ncol=m)
y <- rnorm(n=n, mean=X %*% beta)
target <- 4
targetLasso(x, y, target)
set.seed(42)
n <- 5 # observations
m <- 10 # variables
active <- c(1,2)
beta <- rep(0,m)
beta[active] <- 5
x <- matrix(rnorm(m*n), ncol=m)
y <- rnorm(n=n, mean=X %*% beta)
target <- 4
targetLasso(x, y, target)
set.seed(42)
n <- 5 # observations
m <- 10 # variables
active <- c(1,2)
beta <- rep(0,m)
beta[active] <- 5
x <- matrix(rnorm(m*n), ncol=m)
y <- rnorm(n=n, mean=X %*% beta)
target <- 4
targetLasso(x, y, target)
set.seed(42)
n <- 5 # observations
m <- 10 # variables
active <- c(1,2)
beta <- rep(0,m)
beta[active] <- 5
x <- matrix(rnorm(m*n), ncol=m)
y <- rnorm(n=n, mean=X %*% beta)
target <- 4
targetOracle(x, y, target, m, active)
set.seed(42)
n <- 5 # observations
m <- 10 # variables
active <- c(1,2)
beta <- rep(0,m)
beta[active] <- 5
x <- matrix(rnorm(m*n), ncol=m)
y <- rnorm(n=n, mean=X %*% beta)
target <- 4
targetOracle(x, y, target, m, active)
require(hdi)
?hdi::multi.split
devtools::document()
?getSplits
set.seed(42)
n <- 5 # observations
m <- 10 # variables
active <- c(1,2)
beta <- rep(0,m)
beta[active] <- 5
X <- matrix(rnorm(m*n), ncol=m)
Y <- rnorm(n=n, mean=X %*% beta)
target <- 4
out <- getSplits(X, Y, Q=3, target, varSel=targetOracle, varSelArgs=list(m=m, active=active))
Q <- 3
m <- ncol(X)
n <- nrow(X)
n0 <- floor(n/2)
#if(target > n0){stop("Error: target number should be smaller than half the sample size")}
obs <- vector(mode="list", length=Q)
vars <- vector(mode="list", length=Q)
q <- 1
# randomly split the data in 2 subsets
D1 <- sample(seq(n), n0)
obs[[q]] <- setdiff(seq(n), D1)
varSelArgs=list(m=m, active=active)
varSelArgs
args=c(list(x=X[D1,], y=Y[D1], target=target), varSelArgs)
args
devtools::document()
devtools::document()
set.seed(42)
n <- 5 # observations
m <- 10 # variables
active <- c(1,2)
beta <- rep(0,m)
beta[active] <- 5
X <- matrix(rnorm(m*n), ncol=m)
Y <- rnorm(n=n, mean=X %*% beta)
target <- 4
out <- getSplits(X, Y, Q=3, target, varSel=targetOracle, varSelArgs=list(m=m, active=active))
out
out$vars
out$obs
devtools::document()
out$vars
devtools::document()
?getSplits
devtools::document()
?getSplits
?do.call
devtools::document()
?residualMatrix
devtools::document()
?residualMatrix
devtools::document()
devtools::document()
?stdScore
devtools::document()
?stdScore
devtools::document()
?stdScore
devtools::document()
?stdScore
devtools::document()
?stdScore
devtools::document()
?stdScore
devtools::document()
?stdScore
devtools::document()
?stdScore
devtools::document()
?stdScore
devtools::document()
devtools::document()
devtools::document()
?stdScore
devtools::document()
devtools::document()
?jsplitFlip
devtools::document()
?jsplitFlip
devtools::document()
hdi::multi.split
do.call(sum, args(c(2,3)))
?sum
do.call(sum, args=list(x=c(1,2)))
do.call(summm, args=list(x=c(1,2)))
do.call(mean, args=list(x=c(1,2)))
do.call(Y, args=list(x=c(1,2)))
?do.call
do.call
is.logical(FALSE)
is.logical(1)
is.logical(0)
exact
exact <- T
is.logical(exact)
exact <- NULL
is.logical(exact)
devtools::document()
?splitFlip
devtools::document()
?splitFlip
m <- 2
!is.numeric(m) || !is.finite(m) || round(m) <= 0
m <- -1
!is.numeric(m) || !is.finite(m) || round(m) <= 0
m <- NULL
!is.numeric(m) || !is.finite(m) || round(m) <= 0
m <- "a"
!is.numeric(m) || !is.finite(m) || round(m) <= 0
pwo <- power.t.test(power=0.9, n=50, sig.level=0.05, type="one.sample", alternative="two.sided", sd=1)
pwo
pwo <- power.t.test(power=0.9, n=50, sig.level=0.05, type="one.sample", alternative="two.sided", sd=1)$delta
power.t.test(power=0.9, n=50, sig.level=0.05, type="one.sample", alternative="two.sided", sd=1)$delta
power.t.test(power=0.9, n=50, sig.level=0.05, type="one.sample", alternative="two.sided", sd=5)$delta
power.t.test(power=1, n=50, sig.level=0.05, type="one.sample", alternative="two.sided", sd=5)$delta
power.t.test(power=0, n=50, sig.level=0.05, type="one.sample", alternative="two.sided", sd=5)$delta
devtools::document()
?simData
devtools::document()
?simData
devtools::document()
?simData
devtools::document()
?simData
devtools::document()
?simData
res <- simData(prop=0.1, m=20, n=10, seed=42)
dim(res$X)
dim(res$active)
res$active
length(res$Y)
devtools::document()
?simData
res <- simData(prop=0.1, m=20, n=10, seed=42)
G1 <- splitFlip(X, Y, Q=5, B=20, target=4, exact=T, varSel=targetLasso, varSelArgs=NULL)
dim(X)
G1 <- splitFlip(res$X, res$Y, Q=5, B=20, target=4, exact=T, varSel=targetLasso, varSelArgs=NULL)
dim(G1)
head(round(G1,2))
res$active
G <- splitFlip(res$X, res$Y, Q=5, exact=TRUE)
G <- splitFlip(res$X, res$Y, target=target, Q=5, exact=TRUE)
devtools::document()
devtools::document()
devtools::document()
simData
?simData
res <- simData(prop=0.1, m=20, n=10, seed=42)
dim(res$X)
target <- 2*length(res$active)
target
G <- splitFlip(res$X, res$Y, target=target, Q=5, exact=TRUE)
dim(G)
head(round(G,2))
G <- splitFlip(res$X, res$Y, Q=5, exact=TRUE)
devtools::document()
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with 5 data splits and Lasso selection
G <- splitFlip(res$X, res$Y, target=target, Q=5, exact=TRUE)
G <- splitFlip(res$X, res$Y, Q=5, exact=TRUE)
dim(G)
head(round(G,2))
G <- splitFlip(res$X, res$Y, target=target, Q=10, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
dim(G)
head(round(G,2))
devtools::document()
?simData
devtools::document()
?simData
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with 5 data splits and Lasso selection
G1 <- splitFlip(res$X, res$Y, target=target, Q=5, B=6, exact=TRUE)
round(G1,2)
G2 <- splitFlip(res$X, res$Y, target=target, Q=10, B=6,
varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
round(G2,2)
res <- simData(prop=0.1, m=20, n=10, seed=42)
target <- 2*length(res$active)
target
targetLasso(res$X, res$Y, target)
devtools::document()
?targetLasso
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# selection of at most target variables using the Lasso
targetLasso(res$X, res$Y, target)
?targetOracle
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# selection of at most target variables, including the active ones
targetOracle(res$X, res$Y, target, ncol(res$X), res$active)
devtools::document()
?splitFlip
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with 10 data splits and Lasso selection
G1 <- splitFlip(res$X, res$Y, target=target, B=6, exact=TRUE)
round(G1,2)
devtools::document()
?splitFlip
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with 10 data splits and Lasso selection
G1 <- splitFlip(res$X, res$Y, target=target, B=6, exact=TRUE)
round(G1,2)
G2 <- splitFlip(res$X, res$Y, target=target, Q=5, B=6,
varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
round(G2,2)
devtools::document()
?splitFlip
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with 10 data splits and Lasso selection
G1 <- splitFlip(res$X, res$Y, target=target, B=6, exact=TRUE)
round(G1,2)
G2 <- splitFlip(res$X, res$Y, target=target, Q=5, B=6,
varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
round(G2,2)
?targetLasso
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# selection of at most target variables using the Lasso
targetLasso(res$X, res$Y, target)
?targetOracle
res <- simData(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# selection of at most target variables, including the active ones
targetOracle(res$X, res$Y, target, ncol(res$X), res$active)
devtools::document()
?simData
devtools::document()
?simData
?simData
res <- simData(prop=0.1, m=20, n=10, seed=42)
round(res$X,2)
round(res$Y,2)
res$active
