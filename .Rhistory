res <- simData2(prop=0.1, m=20, n=10, seed=42)
target <- 2*length(res$active)
G2 <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
maxT(G2, alpha=0.1)
res <- simData2(prop=0.1, m=20, n=10, type="toeplitz", rho=0.5, seed=42)
target <- 2*length(res$active)
G2 <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
maxT(G2, alpha=0.1)
devtools::document()
?maxT
# simulate data with Toeplitz covariance matrix
res <- simData2(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
# maxT algorithm
maxT(G2, alpha=0.1)
?targetLasso
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?simData
?simData2
devtools::document()
?simData2
devtools::document()
?simData2
?simData
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
# maxT algorithm
maxT(G, alpha=0.1)
?simData2
# generate linear regression data with 20 variables and 10 observations
res <- simData2(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData2(prop=0.1, m=20, n=10, pw=0.99, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData2(prop=0.1, m=20, n=10, pw=0.95, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData2(prop=0.1, m=20, n=20, pw=0.95, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData2(prop=0.1, m=20, n=20, pw=0.9, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData2(prop=0.1, m=20, n=12, pw=0.9, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData2(prop=0.1, m=20, n=14, pw=0.9, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData2(prop=0.1, m=20, n=15, pw=0.9, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData2(prop=0.1, m=20, n=16, pw=0.9, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData2(prop=0.1, m=20, n=20, pw=0.9, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData2(prop=0.1, m=20, n=18, pw=0.9, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G, alpha=0.1)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
maxT(G, alpha=0.1)
G <- splitFlip(res$X, res$Y, target=target, exact=F, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active))
maxT(G, alpha=0.1)
res <- simData2(prop=0.1, m=20, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G, alpha=0.1)
res <- simData2(prop=0.1, m=40, n=20, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G, alpha=0.1)
res <- simData2(prop=0.05, m=40, n=20, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G, alpha=0.1)
res <- simData2(prop=0.05, m=30, n=20, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G, alpha=0.1)
res <- simData2(prop=0.05, m=30, n=20, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G, alpha)
res <- simData2(prop=0.05, m=30, n=20, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
res <- simData2(prop=0.05, m=30, n=10, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
res <- simData2(prop=0.05, m=30, n=20, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
res <- simData2(prop=0.05, m=30, n=20, pw=0.8,seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
res <- simData2(prop=0.05, m=30, n=20, pw=0.9,seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
res <- simData2(prop=0.05, m=30, n=20, pw=0.4,seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
res <- simData2(prop=0.1, m=30, n=20, pw=0.4,seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
res <- simData2(prop=0.1, m=30, n=20, pw=0.4,seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
0.05*30
0.06*30
0.07*30
2/30
0.1*30
res <- simData2(prop=0.07, m=30, n=20,seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
res <- simData2(prop=0.05, m=30, n=20,seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
res <- simData2(prop=0.05, m=40, n=20,seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
0.05*40
3/40
res <- simData2(prop=0.07, m=40, n=20,seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
res <- simData2(prop=0.05, m=40, n=20,seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
res <- simData2(prop=0.05, m=30, n=20,seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
res <- simData2(prop=0.05, m=30, n=20,seed=1)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
res <- simData2(prop=0.05, m=30, n=20,seed=3)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE)
# maxT algorithm
maxT(G)
?splitFlip
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=42)
maxT(G, alpha=0.1)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=1)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=1)
maxT(G, alpha=0.1)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=3)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=1)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=3)
maxT(G, alpha=0.1)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=99)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=99)
maxT(G, alpha=0.1)
G <- splitFlip(res$X, res$Y, target=target, Q=20, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=99)
maxT(G, alpha=0.1)
G <- splitFlip(res$X, res$Y, target=target, Q=20, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=7)
maxT(G, alpha=0.1)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=7)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G <- splitFlip(res$X, res$Y, target=target, Q=20, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=7)
maxT(G, alpha=0.1)
seed <- 2
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=seed)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=seed)
# maxT algorithm
maxT(G, alpha=0.1)
seed <- 100
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=seed)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=seed)
# maxT algorithm
maxT(G, alpha=0.1)
seed <- 13
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=seed)
# maxT algorithm
maxT(G, alpha=0.1)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=seed)
# maxT algorithm
maxT(G, alpha=0.1)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=seed)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=seed)
# maxT algorithm
maxT(G, alpha=0.1)
seed <- 97
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=seed)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=seed)
# maxT algorithm
maxT(G, alpha=0.1)
seed <- 42
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=seed)
# maxT algorithm
maxT(G, alpha=0.1)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=seed)
# choose target as twice the number of active variables
target <- 2*length(res$active)
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=seed)
# maxT algorithm
maxT(G, alpha=0.1)
devtools::document()
?splitFlip
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(res$X, res$Y, target=target, varSel=targetOracle, varSelArgs=list(m=ncol(res$X), active=res$active), seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
?simData2
# generate linear regression data with 30 variables and 20 observations
res <- simData2(prop=0.05, m=30, n=20, seed=42)
# choose target as twice the number of active variables
target <- 2*length(res$active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(res$X, res$Y, target=target, exact=TRUE, seed=42)
# maxT algorithm
maxT(G)
library(splitFlip)
library(splitFlip)
remove.packages("splitFlip", lib="~/R/win-library/4.0")
devtools::install_github("annavesely/splitFlip")
devtools::install_github("annavesely/splitFlip")
devtools
devtools::
devtools::document()
?targetOracle
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
target <- 2*length(res$active)
targetOracle(res$X, res$Y, target, res$active)
targetOracle(res$X, res$Y, target, res$active)
devtools::document()
devtools::document()
library(splitFlip)
library(splitFlip)
remove.packages("splitFlip", lib="~/R/win-library/4.0")
devtools::install_github("annavesely/splitFlip")
require(splitFlip)
?splitFlip
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
?targetOracle
targetOracle
devtools::document()
?targetOracle
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# selection of at most target variables, including the active ones
targetOracle(X, Y, target, active)
?splitFlip
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=1)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=1)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.05, m=30, n=10, rho=0.5, type="toeplitz", seed=1)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=1)
# maxT algorithm
maxT(G, alpha=0.1)
devtools::document()
library(splitFlip)
