targetOracle(res$X, res$Y, target, res$active)
targetOracle(res$X, res$Y, target, res$active)
devtools::document()
devtools::document()
library(splitFlip)
library(splitFlip)
remove.packages("splitFlip", lib="~/R/win-library/4.0")
devtools::install_github("annavesely/splitFlip")
require(splitFlip)
?splitFlip
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
?targetOracle
targetOracle
devtools::document()
?targetOracle
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# selection of at most target variables, including the active ones
targetOracle(X, Y, target, active)
?splitFlip
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=1)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=1)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.05, m=30, n=10, rho=0.5, type="toeplitz", seed=1)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=1)
# maxT algorithm
maxT(G, alpha=0.1)
devtools::document()
library(splitFlip)
remove.packages("splitFlip", lib="~/R/win-library/4.0")
devtools::install_github("annavesely/splitFlip")
require(splitFlip)
?splitFlip
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
res <- simData(prop = 0.1, m = 20, n = 10, rho = 0.5, type = "toeplitz", seed = 42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
active
target <- 2 * length(active)
targetLasso(X, Y, target)
targetLasso(X, Y, target)
targetOracle(X, Y, target, toSel = active)
targetOracle(X, Y, target, toSel = active)
targetOracle(X, Y, target, toSel = active)
G <- splitFlip(X, Y, Q = 10, exact = TRUE, target = target, varSel = targetLasso, seed = 42)
maxT(G, alpha = 0.1)
res <- simData(prop = 0.05, m = 100, n = 100, rho = 0.5, type = "toeplitz", seed = 42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
active
target <- 2 * length(active)
G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetLasso, seed = 42)
maxT(G, alpha = 0.1)
G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetOracle, varSelArgs=list(toSel=active), seed = 42)
maxT(G, alpha = 0.1)
maxT(G, alpha = 0.05)
system.time(G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetLasso, seed = 42))
maxT(G, alpha = 0.05)
system.time(G <- splitFlip(X, Y, Q = 10, exact = TRUE, target = target, varSel = targetLasso, seed = 42))
maxT(G, alpha = 0.05)
system.time(G <- splitFlip(X, Y, Q = 10, exact = TRUE, target = target, varSel = targetLasso, seed = 42))
system.time(G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetOracle, seed = 42))
system.time(G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetOracle, varSelArgs=list(toSel=active), seed = 42))
system.time(G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetOracle, varSelArgs=list(toSel=active), seed = 42))
system.time(G <- splitFlip(X, Y, Q = 10, exact = TRUE, target = target, varSel = targetOracle, varSelArgs=list(toSel=active), seed = 42))
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, exact=F, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
res <- simData(prop = 0.05, m = 100, n = 100, rho = 0.5, type = "toeplitz", seed = 42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
target <- 2 * length(active)
G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetLasso, seed = 42)
maxT(G, alpha = 0.05)
res <- simData(prop = 0.05, m = 100, n = 80, rho = 0.5, type = "toeplitz", seed = 42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
target <- 2 * length(active)
G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetLasso, seed = 42)
maxT(G, alpha = 0.05)
system.time(G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetLasso, seed = 42))
system.time(G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetLasso, seed = 42))
system.time(G <- splitFlip(X, Y, Q = 10, exact = TRUE, target = target, varSel = targetLasso, seed = 42))
maxT(G, alpha = 0.05)
system.time(G <- splitFlip(X, Y, Q = 10, exact = TRUE, target = target, varSel = targetLasso, seed = 42))
?simData
res <- simData(prop = 0.05, m = 100, n = 80, rho = 0.5, type = "toeplitz", SNR=2, seed = 42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
target <- 2 * length(active)
system.time(G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetLasso, seed = 42))
maxT(G, alpha = 0.05)
res <- simData(prop = 0.05, m = 100, n = 80, rho = 0.5, type = "toeplitz", SNR=1, seed = 42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
target <- 2 * length(active)
system.time(G <- splitFlip(X, Y, Q = 10, exact = FALSE, target = target, varSel = targetLasso, seed = 42))
maxT(G, alpha = 0.05)
system.time(G <- splitFlip(X, Y, Q = 10, exact = TRUE, target = target, varSel = targetLasso, seed = 42))
?simData
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetLasso, seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=1, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with oracle selection
G <- splitFlip(X, Y, target=target, varSel=targetLasso, seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
devtools::document()
?maxT
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with Lasso selection
G <- splitFlip(X, Y, target=target, seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with Lasso selection
G <- splitFlip(X, Y, target=target, exact=T, seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
?splitFlip
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G1 <- splitFlip(X, Y, target=target, exact=TRUE, seed=42)
# maxT algorithm
maxT(G1, alpha=0.1)
G2 <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G2, alpha=0.1)
devtools::document()
?maxT
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=4, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with Lasso selection
G <- splitFlip(X, Y, target=target, seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
?splitFlip
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=4, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G1 <- splitFlip(X, Y, target=target, exact=TRUE, seed=42)
# maxT algorithm
maxT(G1, alpha=0.1)
G2 <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G2, alpha=0.1)
?simData
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=4, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with Lasso selection
G <- splitFlip(X, Y, target=target, seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
?simData2
# generate linear regression data with 30 variables and 20 observations
res <- simData2(prop=0.05, m=30, n=20, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G <- splitFlip(X, Y, target=target, exact=TRUE, seed=42)
# maxT algorithm
maxT(G)
library(splitFlip)
devtools::document()
library(splitFlip)
remove.packages("splitFlip", lib="~/R/win-library/4.0")
devtools::install_github("annavesely/splitFlip")
devtools::document()
?simData
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=4, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
round(X,2)
round(Y,2)
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with Lasso selection
G <- splitFlip(X, Y, target=target, seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=16, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with Lasso selection
G <- splitFlip(X, Y, target=target, seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=10, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with Lasso selection
G <- splitFlip(X, Y, target=target, seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with Lasso selection
G <- splitFlip(X, Y, target=target, seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
devtools::document()
?splitFlip
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G1 <- splitFlip(X, Y, target=target, exact=TRUE, seed=42)
# maxT algorithm
maxT(G1, alpha=0.1)
?maxT
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with Lasso selection
G <- splitFlip(X, Y, target=target, seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
G2 <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G2, alpha=0.1)
G2 <- splitFlip(X, Y, target=target, exact=TRUE, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G2, alpha=0.1)
devtools::document()
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with Lasso selection
G1 <- splitFlip(X, Y, target=target, exact=TRUE, seed=42)
# maxT algorithm
maxT(G1, alpha=0.1)
devtools::document()
?splitFlip
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with Lasso selection
G1 <- splitFlip(X, Y, target=target, seed=42)
# maxT algorithm
maxT(G1, alpha=0.1)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the exact method with oracle selection
G2 <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=42)
# maxT algorithm
maxT(G2, alpha=0.1)
devtools::document()
?simData
?splitFlip
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with Lasso selection
G1 <- splitFlip(X, Y, target=target, seed=42)
# maxT algorithm
maxT(G1, alpha=0.1)
G2 <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=3)
# maxT algorithm
maxT(G2, alpha=0.1)
G2 <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=7)
# maxT algorithm
maxT(G2, alpha=0.1)
G2 <- splitFlip(X, Y, target=target, varSel=targetOracle, varSelArgs=list(toSel=active), seed=99)
# maxT algorithm
maxT(G2, alpha=0.1)
library(splitFlip)
remove.packages("splitFlip", lib="~/R/win-library/4.0")
devtools::install_github("annavesely/splitFlip")
?simData
require(splitFlip)
?simData
# generate linear regression data with 20 variables and 10 observations
res <- simData(prop=0.1, m=20, n=10, rho=0.5, type="toeplitz", SNR=5, seed=42)
X <- res$X # design matrix
Y <- res$Y # response vector
active <- res$active # indices of active variables
# choose target as twice the number of active variables
target <- 2*length(active)
# matrix of standardized scores for all variables (columns) and random sign flips (rows)
# using the approximate method with Lasso selection
G <- splitFlip(X, Y, target=target, seed=42)
# maxT algorithm
maxT(G, alpha=0.1)
#-----------------------------------------------------
setwd("~/Multisplit/Sim_mein")
require(ggplot2)
load("simres_tmp.RData")
library("RColorBrewer")
#cols <- c(brewer.pal(n=6, name = "Blues")[c(3,6)], "darkorange1", "brown3")
#lin <- c("solid", "dashed", "dotdash", "dotted")
myblues <- brewer.pal(n=6, name = "Blues")
cols <- c(myblues[3], "darkorange1", myblues[6], "brown3")
lin <- c("solid", "solid", "dashed", "dotted")
df$pRej <- df$nRej / df$m1
df <- df[df$incrBeta==0,]
df$m1 <- factor(df$m1, levels=c(5,10), labels=c("m1 = 5", "m1 = 10"))
df$SNR <- factor(df$SNR, levels=c(0.25,1,4,16), labels=c("SNR = 0.25", "SNR = 1", "SNR = 4", "SNR = 16"))
x_breaks <- c(0,0.5,0.9)
df0 <- df
df <- df0[df0$m == 100,]
c(min(df$v1), max(df$v1))
c(min(df$nRej), max(df$nRej))
ggplot(data=df, aes(x=rho, y=nRej)) +
geom_line(aes(colour=method, linetype=method), size = 1) +
labs(y = "rejections", x = "rho") +
scale_x_continuous(breaks=x_breaks) +
scale_y_continuous(n.breaks=3) +
facet_grid(SNR ~ m1, scales="free") +
theme_bw(base_size = 15) +
theme(plot.title = element_text(hjust=0.5)) +
scale_colour_manual(values=cols) +
scale_linetype_manual(values=lin)
require(hdi)
?hdi::multi.split
require(splitFlip)
?maxT
maxT
install.packages("BiocManager")
biocManager::install(c("edgeR", "org.EcK12.eg.db"))
BiocManager::install("edgeR")
setwd("~/GitHub/splitFlip")
source("sim_small.R")
setwd("~/GitHub/splitFlip")
